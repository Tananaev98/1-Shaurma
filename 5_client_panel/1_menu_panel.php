<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Заголовок страницы</title>
    </head>
    <body>    
<?php
//-------------------------------------------------------------------0 Настройки------------------------------------------------------
ini_set('display_errors', 1);//Включаем обнаружение ошибок
error_reporting(E_ALL);//Включаем обнаружение ошибок

//------------------------------------------------------------------------------------------------------------------------------------


?>
<style>
        body {
            background-color: #333333;/* Задаем фон страницы */
        }
        div { /* Задаем селектор который будет общим для текста */ 
          color: #FFFFFF;  /* Задаем фон текста */  
          font-family: "MyCustomFont", Arial, sans-serif; /* Задаем более симпатичный шрифт */
        }
        a{
            color: #fff;
        }
        .fio_autorization{/* стиль для строки вывода активного пользователя и кнопки выхода */
            text-align: right; /* Выравнивание текста по правому краю */
            color: black; /* Цвет текста */
            padding: 20px; /* Отступы для текста */ 
        }
        .add_menu{/* Стиль для блока пункта меню */
            position: relative; /* Устанавливаем родительский блок как позиционированный */
            width: 700px; /* Ширина блока */
            height: 50px; /* Высота блока */
            margin: 5% auto; /* Расположение по центру по горизонтали и с отступами */
            background-color: #D55D5D;/* цвет фона*/
            border: 4px solid white; /* Толстая белая рамка */
            border-radius: 10px; /* Закругленные углы */
            padding: 20px; /* Внутренние Отступы  */ 
            text-align: center; /* Центрирование текста по горизонтали */
            display: flex; /* Чтобы центрировать текст по вертикали */
            justify-content: center; /* Центрирование содержимого по горизонтали */
            align-items: center; /* Центрирование содержимого по вертикали */
        }
        .point_menu{/* Стиль для блока пункта меню */
            position: relative; /* Устанавливаем родительский блок как позиционированный */
            width: 300px; /* Ширина блока */
            height: 250px; /* Высота блока */
            margin: 1% auto; /* Расположение по центру по горизонтали и с отступами */
            background-color: #D55D5D;/* цвет фона*/
            border: 4px solid white; /* Толстая белая рамка */
            border-radius: 10px; /* Закругленные углы */
            padding: 20px; /* Внутренние Отступы  */ 
            float:left;
            margin-left:20px;
        }
        .price{ /* Стиль для текста цены */
            position: absolute; /* Устанавливаем дочерний блок как абсолютно позиционированный */
            bottom: -4%; /* Размещаем блок внизу родительского блока */
            right: 2%; /* Размещаем блок справа от родительского блока */
            color:yellow;
            font-size:20px;
        }
        .div_description{ /* создаем блок для текста описания дабы текст не уходил за пределы */
            position: absolute; /* Устанавливаем дочерний блок как абсолютно позиционированный */
            width: 300px;/* Высота блока */
            height: 400px; /* Ширина блока */
            top:20%;
            right: 0; /* Размещаем блок справа от родительского блока */
            overflow: hidden; /* Предотвращаем выход текста за пределы блока */ 
        }     

        .description{ /* Стиль для описания пункта меню */
            position: absolute; /* Устанавливаем дочерний блок как абсолютно позиционированный */
            word-wrap: break-word; /* Разрешаем перенос слов */
        }
        .imagesh {
           border: 2px solid white; /* Задаем белую рамку толщиной 1 пиксель */
           float:left; /* позиционируем слева */
           width:150px;/* задаем ширину */ 
           height:150px;/* задаем высоту */
        }
        .icon_edit_delete {
            display: inline-block;
            right:1%;
            top: -3%;
            float:right;
            margin-left:13px;
            
        }

        .authorization { /*Стиль для блока авторизации */
        width: 350px; /* Ширина блока */
        height: 150px; /* Высота блока */
        background-color: #FF7033; /* Цвет фона */
        color: #fff; /* Цвет текста */
        text-align: center; /* Выравнивание текста по центру */
        line-height: 50px; /* Высота строки для вертикального выравнивания текста */
        margin: 10% auto; /* Расположение по центру по горизонтали и с отступами */
        border: 4px solid white; /* Толстая белая рамка */
        border-radius: 10px; /* Закругленные углы */
        font-size: 24px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        text-align: center; /* Выравнивание текста по центру */
        justify-content: center; /* Центрирование содержимого по горизонтали */
        }
        .reserve { /*Стиль для блока с выводом состава объекта меню */
            width:300px; /*Ширина блока */
            height:250px;/*Высота блока */
            /*background-color:green;/*Цвет блока */
            float:right;/*позиционируем блок справа*/
            margin-right:-5%;/*Отступ справа */
            margin-top:20%;/*Отступ сверху*/
            
        }
        .menu { /*Стиль для сгруппированных сгенерированных объектов меню */
            margin-top: 10%; /*Отступ сверху*/
        }

        .overlay {
            position: fixed; /* Фиксированное позиционирование */
            margin-left:20%;
            margin-top:-10%; 
            width: 60%; /* Ширина блока на всю ширину окна */
            height: 90%; /* Высота блока на всю высоту окна */
            background-color: #FF7033;/* цвет фона*/
            z-index: 9999; /* Высокий уровень z-index для отображения блока поверх всех остальных элементов */
            border: 6px solid white;/*рамка*/
            border-radius: 10px; /* Закругленные углы */
           display: none; /* Скрываем блок по умолчанию */
        }
        .close {/* Стили для кнопки "Закрыть" */
            margin-top:-2%;/* отступ */
            float:right;/* позиционирование справа */
            margin-right:-2%; /* отступ */
            width:80px;/* Ширина */
            height:80px;/* Высота */

        }

        #dispPrice { /* стили для текста "Цена" внутри всплывающего окна */
            position: absolute;/* абсолютное позиционирование */
            bottom:10%;/* отступ снизу */
            right:2%;/* отступ справа */
            color:yellow; /* цвет */
        }

        #dispName { /* стили для текста "Название" внутри всплывающего окна */
            position: absolute; /* абсолютное позиционирование */
            left: 50%; /* разместить элемент на 50% от левой границы блока-родителя */
            transform: translateX(-50%); /* сдвинуть элемент обратно на половину его ширины */
            font-size:40px;  /* размер текста */
        }

        #dispImage {  /* стили для изображения внутри всплывающего окна */
            position: absolute;/* абсолютное позиционирование */   
            right:5%;/* отступ справа */
            top:20%;/* отступ сверху */
            width:450px;/* Ширина */ 
            height:450px; /* Высота */ 
            border: 4px solid white;/*рамка*/ 
        }
        #dispDescription {
            position: absolute;/* абсолютное позиционирование */   
            left:5%;/* отступ справа */
            top:20%;/* отступ сверху */
            overflow-wrap: break-word; /* Позволяет тексту переноситься на новую строку */
            width: 200px; /* Примерная ширина контейнера */

        }

        #descriptionDop{/* Стили для блока со списком ингредиентов объекта меню */   
            position:absolute;/* абсолютное позиционирование */
            left:30%;/* отступ справа */
            top:35%;/* отступ сверху */
           /* background-color:yellow;/* цвет */
            width:300px;/* ширина */
            height:450px;/* высота */
        }

        #RReserves {/* Стили текста списка ингредиентов */
            font-size:18px;/* Размер текста */
            
            
        }

        .basket {/* Стили для корзины */
            
            position:fixed;/* Фиксированная позиция */
            right:0;/* прижимаем к правому краю */
            bottom:0;/* прижимаем к нижнему краю */
            width:200px;/* ширина */
            height:200px;/* высота */

        }

        .basketImg{
            width:200px;/* ширина */
            height:200px;/* высота */
        }

        .quantProducts{ /* стили для числа добавленных продуктов в корзину */
            position:absolute;/* абсолютное позиционирование */
            color:red;
            font-size:50px;
            right:40%;
            bottom:10%;
            font-weight: bold; /* Установите желаемую жирность шрифта */
        }
    </style>
<?php



//---------------------------------------------------------------------------Соединение с бд-------------------------------------------------------------------------
// Устанавливаем и проверяем соединение с базой данных
$db_host = "192.168.1.94"; // Имя хоста базы данных
$db_port = "5432"; // Порт базы данных (по умолчанию 5432 для PostgreSQL)
$db_name = "shaurmadb"; // Имя базы данных
$db_user = "adminsh"; // Имя пользователя базы данных
$db_password = "admin"; // Пароль пользователя базы данных
$conn = pg_connect("host=$db_host port=$db_port dbname=$db_name user=$db_user password=$db_password");//используя данные устанавливаем соединение

// Проверяем успешность соединения
if (!$conn) {
    
    echo "Ошибка подключения к базе данных: " . pg_last_error($conn);//в случае неудачи выводим ошибку
    exit; //прекращаем выполнение кода если соединение с базой не установленно, дабы избежать выполнение лишнего кода
} 

//Если соединение установленно успешно продолжаем выполнение кода

    // Соединение установлено успешно, можно выполнять операции с базой данных
    //echo "Соединение с базой данных установлено успешно!";

    $sql = "select * from menu order by id";//Подготавливаем запрос по поиску соответсвия логина и пароля в базе.
    $result = pg_query($conn, $sql);//выполняем запрос к бд используя подготовленное соединение и запрос

    if (!$result){ echo "Ошибка выполнения запроса: " . pg_last_error($conn); exit;}//проверяем выполнение запроса, в случае неудачи выводим подробную ошибку
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------



//-------------------------------------------------------------Генерация блоков на каждый пункт меню---------------------------------------------------------------
    // Если запрос выполнен успешно, обрабатываем результат
echo "<div class='menu'>";//создаем блок для группирования всех генерируемых элементов(нужно для стилизации)

    $countWhile = 0;//создаем переменную для отслеживания количество выполнений цикла, она нужна для вывода объектов меню в ряд по 5 штук

    while ($row = pg_fetch_assoc($result)) {
        // Создание div для каждой записи и вывод данных из строки
        $id_object = $row["id"];//сохраняем идентификатор объекта в переменную для передачи этого значения в ссылки удаления и редактирования
        //$id_object_encoded = urlencode($id_object); //кодируем переменную для безопасной передачи
        echo "<div class = 'point_menu' onclick='dispWindow(\"$id_object\")'>"; //создаем блок с классом для возможности стилизации, добавляем к нему обработчик js c передачей идентификатора в качестве аргумента 
        //echo "<a href='3_delete_menu.php?id_object= $id_object_encoded' class='icon_edit_delete' title='Перейти к удалению этого объекта меню'><img src='1_image/2_delete.png'></a>";//выводим изображение ссылку на сценарий удаления этого объекта, ссылке передаем переменную которая идентифицирует объект в другом сценариии
        //echo "<a href='4_edit_menu.php?id_object= $id_object_encoded' class='icon_edit_delete' title='Перейти к редактированию этого объекта меню'><img src='1_image/1_edit.png'></a>";//выводим изображение ссылку на сценарий удаления этого объекта      
        echo "<h4>" . $row["name"] . "</h4><br>"; //выводим идентификатор и наименование пункта меню
        //echo "<div class='div_description'><h4 class='description'>" . $row["description"]. "</h4></div><br>";//выводим описание пункта меню
        echo "<h1 class='price'>" . $row["price"]. " Рублей" ."</h1><br>";//выводим описание пункта меню  
        $imagesh = $row["link_image"]; //получаем ссылку на изображение из бд и сохраняем в переменную.
        echo "<img src='$imagesh' class='imagesh'>";//выводим изображение
        echo "</div>";//закрываем блок 
        

        //---------------------код для разбиения генерируемых элементов по строкам--------------------------------------------------------------
        $countWhile = $countWhile +1; //подсчитываем количество выполнений цикла
        if ($countWhile == 5) { // отслеживаем количество выполнений цикла и количество созданных элементов для создания вертикального отступа
            echo "<br>";//делаем вертикальный отступ при выполнении условия
            $countWhile = 0;//возвращаем переменную к началу для проверки генерации на новой строке
        }
        //---------------------------------------------------------------------------------------------------------------------------------------
    }

// Закрытие соединения
pg_close($conn);
echo "<div>";//закрываем блок с классом menu
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------
//http://192.168.1.95/5_client_panel/1_menu_panel.php



//-----------------------------------------------------------------Всплывающее окно--------------------------------------------------------------------------------

echo"<div class='overlay' id = 'description'>";//Всплывающее окно с детальной инфорацией об каждом объекте меню

echo "<img src='/5_client_panel/1_image/1_close.png' class='close' onclick='dispHide()'>";//Иконка закрыть

echo"<div class='overlayDop' id = 'descriptionDop'><h4>Состав: <br></h4></div>"; //дополнительный блок для размещения состава объекта меню

echo"</div>";//Всплывающее окно с детальной инфорацией об каждом объекте меню

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------





//-----------------------------------------------------------------Корзина-----------------------------------------------------------------------------------------
echo "<div class='basket'>";//открываем блок с корзиной
echo "<img src='/5_client_panel/1_image/2_basket.png' class='basketImg' onclick='dispHideee()'>";//корзина
echo "<span class='quantProducts'>0</span>";//количество добавленных товаров
echo "</div>";//закрываем блок с корзиной


//-----------------------------------------------------------------------------------------------------------------------------------------------------------------
?>
  
<!-- дальнейший код html не будет отображен в случае не удачной авторизации или аутентификации-->



</body>

<script>

 
//---------------------------------------Функция для вывода подробного описания объекта меню-----------------------------------------------------------------------
var popupWindowVisible = false; //переменная для отслеживания отображения окна
var hiddenBlock = document.querySelector('.overlay'); //находим скрытый блок
var hiddenBlockDop = document.querySelector('.overlayDop'); //находим скрытый блок
function dispWindow(ident){
    if (popupWindowVisible) { return;}// Если всплывающее окно отображается то блокируем функцию

   
    hiddenBlock.style.display = 'block';//отображаем блок
    //hiddenBlock.insertAdjacentHTML('beforeend', "<h2 class = 'timeContent'>" + ident + "</h2>"); //вывод для проверки идентификатора 
    popupWindowVisible = true; //обновляем статус отображения окна
    displayingStocks(ident); //вызываем функцию для вывода подробного описания 
};

//-----------------------------------------------------------первый запрос к бд на вывод данных
function displayingStocks(ident) { //создаем функцию которая будет вызывать ajax запрос
    
    var xhr = new XMLHttpRequest(); // Создаем новый ajax запрос
    xhr.open('GET', '1.1_ajax_displayingStocks.php?id=' + ident, true);//Делаем запрос к серверу через php скрипт передавая значение выбранное пользователем

    xhr.onreadystatechange = function() {//вызываем функцию при изменении состояния запроса ajax
    if (xhr.readyState === XMLHttpRequest.DONE) {//проверка на завершение запроса
        if (xhr.status === 200) {//проверка ответа на успешное выполнение
            var response = JSON.parse(xhr.responseText);//сохраняем ответ от сервера в переменную
            // Обработка ответа
            

            response.forEach(function(row) {//перебор и вывод данных из бд
        // Обращаемся к значениям столбцов по их наименованиям
        var rowName = row.name;//сохраняем значение колонки бд в переменную
        var rowPrice = row.price;//сохраняем значение колонки бд в переменную
        var rowDescription = row.description;//сохраняем значение колонки бд в переменную
        var rowImage = row.link_image;//сохраняем значение колонки бд в переменную

        // Делаем что-то с полученными значениями, например, выводим их на страницу
        hiddenBlock.insertAdjacentHTML('beforeend', "<h2 id ='dispName' class = 'timeContent'>" + rowName + "</h2>"); //выводим контент на страницу
        hiddenBlock.insertAdjacentHTML('beforeend', "<h3 id ='dispDescription' class = 'timeContent'>" + rowDescription + "</h3>"); //выводим контент на страницу
        hiddenBlock.insertAdjacentHTML('beforeend', "<h1 id ='dispPrice' class = 'timeContent'>" + rowPrice + " Рублей" + "</h1>"); //выводим контент на страницу
        hiddenBlock.insertAdjacentHTML('beforeend', "<img class = 'timeContent' id ='dispImage' src='" + rowImage  + "'>");//выводим контент на страницу

        displayingDopStocks(ident);//вызываем функцию для вывода потребности ингредиентов
    });


            

        } else {//если ajax не вернул ожидаемый ответ
            console.error('Ошибка при выполнении запроса: ' + xhr.status);//выводим ошибку в логи
        }
    }
};
    xhr.send();//выполняем запрос в соответствии с настроенными ранее параметрами
    
};
//-------------------------------------------------------------------------------------------




//-----------------------------------------------------------второй запрос к бд на вывод данных
function displayingDopStocks(ident) { //создаем функцию которая будет вызывать ajax запрос
    
    var xhr = new XMLHttpRequest(); // Создаем новый ajax запрос
    xhr.open('GET', '1.2_ajax_dopDisplayingStocks.php?id=' + ident, true);//Делаем запрос к серверу через php скрипт передавая значение выбранное пользователем

    xhr.onreadystatechange = function() {//вызываем функцию при изменении состояния запроса ajax
    if (xhr.readyState === XMLHttpRequest.DONE) {//проверка на завершение запроса
        if (xhr.status === 200) {//проверка ответа на успешное выполнение
            var response = JSON.parse(xhr.responseText);//сохраняем ответ от сервера в переменную
            // Обработка ответа


            response.forEach(function(row) {//перебор и вывод данных из бд
        // Обращаемся к значениям столбцов по их наименованиям
        var rowName = row.name;//сохраняем значение колонки бд в переменную
        var rowQuantReserv = row.quant_reserv;//сохраняем значение колонки бд в переменную
        

        // Делаем что-то с полученными значениями, например, выводим их на страницу
        hiddenBlockDop.insertAdjacentHTML('beforeend', "<span id ='RReserves' class = 'timeContent'>" + rowName + ': ' + rowQuantReserv + ' гр.' + "</span><br class = 'timeContent'>"); //выводим контент на страницу    
    });


            

        } else {//если ajax не вернул ожидаемый ответ
            console.error('Ошибка при выполнении запроса: ' + xhr.status);//выводим ошибку в логи
        }
    }
};
    xhr.send();//выполняем запрос в соответствии с настроенными ранее параметрами
    
};
//-------------------------------------------------------------------------------------------




//----------------------------------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------Функция для скрытия блока с описанием-----------------------------------------------------------------------------------
function dispHide(){
    //var hiddenBlock = document.querySelector('.overlay'); //находим блок
    hiddenBlock.style.display = 'none';//скрываем блок
    
    var elementsToRemove = document.querySelectorAll('.timeContent') //Находим временный контент для дальнейшей очистки   
    elementsToRemove.forEach(function(element) {//перебираем временный контент
    element.remove(); // очищаем временный контент

    popupWindowVisible = false; //обновляем статус отображения окна 
});
    
};
//----------------------------------------------------------------------------------------------------------------------------------------------------------------




//---------------------------------------------------------Серия Функций для вывода количества товаров добавленных в корзину--------------------------------------

//----------------------------------Функция для определения существует ли зака со статусом "Создан"
function verifCreatedOrders() { //создаем функцию которая будет вызывать ajax запрос
    
    var xhr = new XMLHttpRequest();// Создаем новый ajax запрос
    xhr.open('GET', '1.3_ajax_verifCreatedOrders.php', true);//вызываем сценарий php
    xhr.onload = function() { //после получения ответа
    if (xhr.status >= 200 && xhr.status < 300) { // проверяем что сценарий не вернул ошибку
        var responseText = xhr.responseText; // Сохраняем текстовое значение в переменной
       
        if (responseText == 1) { idCreatedOrders(); }//Если заказ со статусом "Создан" существует тогда вызываем функцию для определения идентификатора этого заказа
        if (responseText == 0) { createOrder(); }//Если заказ со статусом "Создан" не существует тогда вызываем функцию для создания нового заказа.

    } else { //Обработка ошибок
        console.error('Ошибка при выполнении запроса:', xhr.statusText); //Обработка ошибок
    }
    };
    xhr.onerror = function() {//Обработка ошибок
    console.error('Произошла ошибка при отправке запроса');//Обработка ошибок
    };
    xhr.send();//выполнение ajax запроса
    
};
window.onload = verifCreatedOrders;//вызываем функцию при первой загрузке страницы
//----------------------------------------------------------------------------------------------


//---------------------------------Функция для получения идентификатора заказа со статусом "создан"
var idCreated; //Идентификатор понадобиться нам во многих местах поэтому нам нужна глобальная переменная
function idCreatedOrders() { //создаем функцию которая будет вызывать ajax запрос
    
    var xhr = new XMLHttpRequest();// Создаем новый ajax запрос
    xhr.open('GET', '1.4_ajax_idCreatedOrders.php', true);//вызываем сценарий php
    xhr.onload = function() { //после получения ответа
    if (xhr.status >= 200 && xhr.status < 300) { // проверяем что сценарий не вернул ошибку
        idCreated = xhr.responseText; // Сохраняем текстовое значение в переменной
       
        updateBasket(idCreated); //Вызываем функцию для возврата количества товаров добавленных в корзину и отображения этого числа возле корзины

    } else { //Обработка ошибок
        console.error('Ошибка при выполнении запроса:', xhr.statusText); //Обработка ошибок
    }
    };
    xhr.onerror = function() {//Обработка ошибок
    console.error('Произошла ошибка при отправке запроса');//Обработка ошибок
    };
    xhr.send();//выполнение ajax запроса
    
};



//------------------------------------------------------------------------------------------------

//---------------------------------Функция для отображения количества добавленных товаров в корзину
function updateBasket(ident) { //создаем функцию которая будет вызывать ajax запрос
    
    var xhr = new XMLHttpRequest();// Создаем новый ajax запрос
    xhr.open('GET', '1.5_ajax_updateBasket.php?id=' + ident, true);//вызываем сценарий php
    xhr.onload = function() { //после получения ответа
    if (xhr.status >= 200 && xhr.status < 300) { // проверяем что сценарий не вернул ошибку
        var counPosOrder = xhr.responseText; // Сохраняем текстовое значение в переменной
       
        document.querySelector(".quantProducts").textContent = counPosOrder; //изменяем значение html элемента задавая ему число товаров добавленных в корзину
        
    } else { //Обработка ошибок
        console.error('Ошибка при выполнении запроса:', xhr.statusText); //Обработка ошибок
    }
    };
    xhr.onerror = function() {//Обработка ошибок
    console.error('Произошла ошибка при отправке запроса');//Обработка ошибок
    };
    xhr.send();//выполнение ajax запроса
    
};
//------------------------------------------------------------------------------------------------

//---------------------------------Функция для создания нового пустого заказа---------------------
// Определение функции для отправки AJAX-запроса
function createOrder() {//объявляем функцию
        
var url = "1.6_ajax_create_order.php";//создаем переменную содержащую адрес сценария который будет обрабатывать наш запрос

var xhr = new XMLHttpRequest();// Создаем новый объект XMLHttpRequest

xhr.open("GET", url, true);//дополняем параметры отправки get запроса

// Определяем функцию обратного вызова для обработки ответа от сервера
xhr.onreadystatechange = function() {//вызываем функцию при изменении состояния запроса ajax
    if (xhr.readyState === XMLHttpRequest.DONE) {//проверка на завершение запроса
        if (xhr.status === 200) {//проверка на успешное выполнение
            console.log(xhr.responseText); // Выводим сообщение из PHP в консоль
            verifCreatedOrders(); //после успешного создания пустого заказа, запускаем цепочку функций для определения идентификатора этого заказа 
            
        } else {
            console.error("Произошла ошибка при выполнении запроса: " + xhr.status);//вывод ошибки в консоль
        }
    }
};


xhr.send();// Отправляем GET-запрос на сервер
}



//------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
</script>