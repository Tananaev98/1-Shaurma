<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Заголовок страницы</title>
    

</head>
<body>

<?php
//-------------------------------------------------------------------0 Настройки------------------------------------------------------
ini_set('display_errors', 1);//Включаем обнаружение ошибок
error_reporting(E_ALL);//Включаем обнаружение ошибок
//------------------------------------------------------------------------------------------------------------------------------------

session_start();// Запускаем сессию для проверки авторизации и аутентификации пользователей 
?>



    
<?php
if (!isset($_SESSION['fio'])) {
    // Если сессия не инициализирована, перенаправляем пользователя на страницу входа или показываем сообщение об ошибке
    echo "<div class = 'authorization'>Вы не авторизованы!!!.<br><br><a href='../index.html'>Перейти на страницу авторизации</a></div>"; // Выводим пользователю сообщение о том что он
    // не авторизован и даем ему ссылку на страницу авторизации
    exit(); // Прерываем выполнение скрипта
}
if ($_SESSION['role'] !== "admin") { //после успешной авторизации дополнительно проводим проверку на аутентификацию
    echo "<div class = 'authorization'>Ваших прав недостаточно для просмотра этой страницы!!!!.<br><br><a href='/index.html'>Перейти на страницу авторизации</a></div>";//выводим 
    //сообщение в случае не удачной аутентификации
    exit(); // Прерываем выполнение скрипта
}
echo "<h3 class='fio_autorization'>{$_SESSION['fio']}<br><a href='/2_authorization/2_exit.php'>Выход</a> </h3>"; //Вывод активного пользователя и кнопка выхода  


//---------------------------------------------------------------------------Соединение с бд-------------------------------------------------------------------------
// Устанавливаем и проверяем соединение с базой данных
$db_host = "192.168.1.94"; // Имя хоста базы данных
$db_port = "5432"; // Порт базы данных (по умолчанию 5432 для PostgreSQL)
$db_name = "shaurmadb"; // Имя базы данных
$db_user = "adminsh"; // Имя пользователя базы данных
$db_password = "admin"; // Пароль пользователя базы данных
$conn = pg_connect("host=$db_host port=$db_port dbname=$db_name user=$db_user password=$db_password");//используя данные устанавливаем соединение

// Проверяем успешность соединения
if (!$conn) {
    
    echo "Ошибка подключения к базе данных: " . pg_last_error($conn);//в случае неудачи выводим ошибку
    exit; //прекращаем выполнение кода если соединение с базой не установленно, дабы избежать выполнение лишнего кода
} 

//Если соединение установленно успешно продолжаем выполнение кода

    // Соединение установлено успешно, можно выполнять операции с базой данных
    //echo "Соединение с базой данных установлено успешно!";
//------------------------------------------------------------------------------------------------------------------------------------------------------------------




//---------------------------------------------------------------------------Подготавливаем и выполняем запрос к бд--------------------------------------------------

$sql = "select id, name from reserves where availability = 'Разрешен';";//Подготавливаем запрос по поиску соответсвия логина и пароля в базе. используем обратную сортировку для того что бы
//записи со значением "Разрешен" выводились вверху а "Запрещен" соотвественно внизу
$result = pg_query($conn, $sql);//выполняем запрос к бд используя подготовленное соединение и запрос

if (!$result){ echo "Ошибка выполнения запроса: " . pg_last_error($conn); exit;}//проверяем выполнение запроса, в случае неудачи выводим подробную ошибку
//------------------------------------------------------------------------------------------------------------------------------------------------------------------

?>

<!-- дальнейший код html не будет отображен в случае не удачной авторизации или аутентификации-->
<div class = "authorization"><!-- Блок формы -->
<form action="4.2_remains_reserves.php" method="post" enctype="multipart/form-data" id="formID" ><!-- создаем форму для последующей отправки в php -->
<h2>Новое поступление товара</h2><!-- Заголовок формы -->
<span id='sp1' class = 'descr'>Товар: </span><select id ="sel1" name="id_reserves"><!-- начинаем реализацию выпадающего списка на основании значений из бд -->
<?php
while ($row = pg_fetch_assoc($result)) { //цикл действующий до тех пор пока не выведет все записи из запроса
    $id_reserves=$row['id']; // сохраняем идентификатор в переменную
    $name_reserves=$row['name']; // сохраняем наименование в переменную
    echo "<option value='$id_reserves'>$name_reserves</option>";//создаем выпадающий список из наименований запасов, в качестве передаваемого значения используем идентификатор
   
}
?>
</select><br>

<span id='sp2' class = 'descr'>Дата поступления товара: </span><input type="date" id="l2" name="date_r"><br><!-- Поле для ввода цены нового объекта -->
<span id='sp3' class = 'descr'>Цена: </span><input type="text" id="l3" name="cost_g" class='numberInput' placeholder="Цена за 1 грам товара.....(ввод только цифр)"><br><!-- Поле для ввода цены нового объекта -->
<span id='sp4' class = 'descr'>Количество: </span><input type="text" id="l4" name="quant_r" class='numberInput' placeholder="Количество поступления товара в граммах.....(ввод только цифр)"><span id='sp4_1'>(Мин Макс)</span><br><!-- Поле для ввода цены нового объекта -->
<span id='sp5' class = 'descr'>Дата истечения срока: </span><input type="date" id="l6" name="exp_date"><br><!-- Поле для ввода цены нового объекта -->
<span id='sp6'></span>
<input type="submit" value="Создать"><!-- Кнопка "Создать" -->
</form>
</div>

<script>


//-----------Проверяем что пользователь вводит только цифры в поля 2 3 и 4 
// Получаем все поля ввода с классом "numberInput"
var numberInputs = document.querySelectorAll(".numberInput");

// Добавляем обработчик события input к каждому полю ввода с классом "numberInput"
numberInputs.forEach(function(input) {
  input.addEventListener("input", function(event) {
    // Получаем введенный текст
    var inputValue = event.target.value;
    
    // Удаляем все нецифровые символы из введенного текста
    var onlyDigits = inputValue.replace(/\D/g, "");
    
    // Обновляем значение в поле ввода, оставляя только цифры
    event.target.value = onlyDigits;
  });
});


//--------------------------------------------------------------------------

//----------------------------------------C Помощью js предотавращаем вставку лишних пробелов в имени файла---------------------------------------------    
// Получаем ссылку на форму
var form = document.getElementById("formID");

// Добавляем обработчик события submit
form.addEventListener("submit", function(event) {
    var quantityInput = document.getElementById("l4").value;
    // Обрабатываем все поля ввода с id, начинающимися с "l"
roznMin =  quantityInput - min_quant;//вычисляем разницу между введенным значением от пользователя и минимальным значением для проверки вхождения в диапазон
roznMax =  max_quant - quantityInput;//вычисляем разницу между введенным значением от пользователя и максимальным значением для проверки вхождения в диапазон

    if (roznMin < 0 || roznMax <0) {//проверяеем вхождение в диапазон
        // Если количество не находится в диапазоне, отменяем отправку формы
        event.preventDefault();
        

        document.getElementById("l4").style.border = "3px solid red"; //Обводим поле ввода зеленой рамкой если пользователь ввел верное значение 

// Через 3 секунды возвращаем цвет рамки к исходному
setTimeout(function() {
    document.getElementById("l4").style.border = "";
}, 3000);

        // Выводим сообщение об ошибке
        
        document.getElementById("sp6").textContent = "Количество товара должно быть между " + min_quant + " и " + max_quant;//Обновляем данные 
    }else{form.submit();}
   
    


    // Теперь можно явно отправить форму на сервер
//form.submit();
    
});
//-------------------------------------------------------------------------------------------------------------------------------------------------------




//-------------------------------------------------------------Проверка на ввод минимальных и максимальных значений---------------------------------------
var selectElement = document.getElementById('sel1'); //--выбираем элемент

var min_quant;//Объявляем переменные которые мы затем изменим в функции, объявляем их заранее для доступа за пределами функции
var max_quant;//Объявляем переменные которые мы затем изменим в функции, объявляем их заранее для доступа за пределами функции

function handleSelectChange() { //создаем функцию которая будет вызывать ajax запрос
    var selectedValue = selectElement.value;// Получаем выбранное значение из списка

    var xhr = new XMLHttpRequest(); // Создаем новый ajax запрос
    xhr.open('GET', '4.3_ajax_min_max_reserves.php?id=' + selectedValue, true);//Делаем запрос к серверу через php скрипт передавая значение выбранное пользователем

    xhr.onload = function() {//Начинаем обработку данных после ответа от сервера
        if (xhr.status >= 200 && xhr.status < 400) { //проверяем что код ответа от сервера находится в указанном диапазоне т.е. сервер не вернул нам ошибку
            var response = JSON.parse(xhr.responseText); //преобразуем ответ от сервера из json и сохраняем в переменную

            min_quant = response.min_quantity;//Обновляем наши глобальные переменные в дальнейшем мы будем их использовать для проверки ввода минимального и максимального значения
            max_quant = response.max_quantity;//Обновляем наши глобальные переменные в дальнейшем мы будем их использовать для проверки ввода минимального и максимального значения

            var quantityInfo = document.getElementById('sp4_1');//получаем доступ к элементу html внутри которого будем обновлять данные
            quantityInfo.textContent = '(Минимум: ' + response.min_quantity + ', Максимум: ' + response.max_quantity+')';//Обновляем данные  
        } else {
            // В случае ошибки выведем сообщение об ошибке
            console.error('Ошибка при выполнении запроса:', xhr.status);
        }   

    };
    xhr.onerror = function() {
        // В случае ошибки выведем сообщение об ошибке
        console.error('Произошла ошибка при отправке запроса');
    };
    xhr.send();//выполняем запрос в соответствии с настроенными ранее параметрами
    
};



handleSelectChange.call(selectElement);// Вызываем функцию обработки изменения значения для выполнения AJAX запроса при первой загрузке страницы

selectElement.addEventListener('change', handleSelectChange);// Добавляем обработчик события change для элемента select

//--------------------------------------------------------------------------------------------------------------------------------------------------------
</script>    

<style>
        body {
            background-color: #333333;/* Задаем фон страницы */
        }
        div { /* Задаем селектор который будет общим для текста */ 
          color: #FFFFFF;  /* Задаем фон текста */  
          font-family: "MyCustomFont", Arial, sans-serif; /* Задаем более симпатичный шрифт */
        }

        .authorization { /*Стиль для блока авторизации */
        width: 60%; /* Ширина блока */
        height: 750px; /* Высота блока */
        background-color: #FF7033; /* Цвет фона */
        color: #fff; /* Цвет текста */
        text-align: center; /* Выравнивание текста по центру */
        line-height: 50px; /* Высота строки для вертикального выравнивания текста */
        margin: 1% auto; /* Расположение по центру по горизонтали и с отступами */
        border: 4px solid white; /* Толстая белая рамка */
        border-radius: 10px; /* Закругленные углы */
        font-size: 24px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        text-align: center; /* Выравнивание текста по центру */
        justify-content: center; /* Центрирование содержимого по горизонтали */
        }
        a{
            color: #fff;
        }
        .fio_autorization{/* стиль для строки вывода активного пользователя и кнопки выхода */
            text-align: right; /* Выравнивание текста по правому краю */
            color: black; /* Цвет текста */
            padding: 20px; /* Отступы для текста */ 
        }
        input[type="text"] { /* Задаем стиль для инпутов с типом текст */
        position: relative;/* позиция относительно блока */
        width: 50%; /* Установка ширины на 100%, чтобы элемент занимал всю доступную ширину */
        padding: 10px; /* Добавление внутреннего отступа в 10 пикселей вокруг текстового поля */
        margin-top: 3%; /* Добавление отступа снизу в 10 пикселей между текстовыми полями */
        border: none; /* Удаление границы текстового поля (без рамки) */
        border-radius: 5px; /* Закругление углов текстового поля с радиусом 5 пикселей*/
        background-color: #FFDAB9;/* цвет фона*/
        color:#FF7033;/* цвет текста внутри кнопки*/
        font-size: 16px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        }

        input[type="date"] { /* Задаем стиль для инпутов с типом текст */
        position: relative;/* позиция относительно блока */
        width: 50%; /* Установка ширины на 100%, чтобы элемент занимал всю доступную ширину */
        padding: 10px; /* Добавление внутреннего отступа в 10 пикселей вокруг текстового поля */
        margin-top: 3%; /* Добавление отступа снизу в 10 пикселей между текстовыми полями */
        border: none; /* Удаление границы текстового поля (без рамки) */
        border-radius: 5px; /* Закругление углов текстового поля с радиусом 5 пикселей*/
        background-color: #FFDAB9;/* цвет фона*/
        color:#FF7033;/* цвет текста внутри кнопки*/
        font-size: 16px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        }

        textarea { /* Задаем стиль для инпутов с типом пароль */
        position: relative;/* позиция относительно блока */
        width: 50%; /* Установка ширины на 100%, чтобы элемент занимал всю доступную ширину */
        padding: 10px; /* Добавление внутреннего отступа в 10 пикселей вокруг текстового поля */
        margin-top: 3%; /* Добавление отступа снизу в 10 пикселей между текстовыми полями */
        border: none; /* Удаление границы текстового поля (без рамки) */
        border-radius: 5px; /* Закругление углов текстового поля с радиусом 5 пикселей*/
        background-color: #FFDAB9;/* цвет фона*/
        font-size: 16px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        }

        input[type="submit"] { /* Задаем стиль для инпутов с типом пароль */
        position: relative;/* позиция относительно блока */
        width: 50%; /* Установка ширины на 100%, чтобы элемент занимал всю доступную ширину */
        padding: 10px; /* Добавление внутреннего отступа в 10 пикселей вокруг текстового поля */
        margin-top: 3%; /* Добавление отступа снизу в 10 пикселей между текстовыми полями */
        border: none; /* Удаление границы текстового поля (без рамки) */
        border-radius: 5px; /* Закругление углов текстового поля с радиусом 5 пикселей*/
        background-color: #FF4500;/* цвет фона*/
        color:#FFFFFF;/* цвет текста внутри кнопки*/
        }
        select {
        position: relative;/* позиция относительно блока */
        width: 50%; /* Установка ширины на 100%, чтобы элемент занимал всю доступную ширину */
        padding: 10px; /* Добавление внутреннего отступа в 10 пикселей вокруг текстового поля */
        margin-top: 3%; /* Добавление отступа снизу в 10 пикселей между текстовыми полями */
        border: none; /* Удаление границы текстового поля (без рамки) */
        border-radius: 5px; /* Закругление углов текстового поля с радиусом 5 пикселей*/
        background-color: #FFDAB9;/* цвет фона*/
        font-size: 16px; /* Установите желаемый размер шрифта */
        font-weight: bold; /* Установите желаемую жирность шрифта */
        }

        .descr{
            position:absolute;
            float: left;
            font-size:18px;
            margin-left:-13%;
            
        }

        #sp1{
            margin-top:1.5%;
            margin-left:-4.4%;
        }
        #sp2{
            margin-top:1.5%;
        }

        #sp3{
            margin-top:1.5%;
            margin-left:-3.6%;
        }

        #sp4{
            margin-top:1.5%;
            margin-left:-6.8%;
        }

        #sp5{
            margin-top:1.5%;
            margin-left:-11.6%;
        }

        #sp4_1{
            position:absolute;
            margin-top:1.6%;
            margin-left:0.5%;
            color:yellow;
            float:right;
            font-size:15px;
        }
        #sp6{
            position:absolute;
            margin-top:4.5%;
            margin-left:8%;
            color:red;

        }
    </style>





</body>
